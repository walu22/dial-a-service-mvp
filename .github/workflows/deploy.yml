name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEPLOYMENT_ENV: production
  DEPLOYMENT_BRANCH: main
  DEPLOYMENT_TAG: v${{ github.event.ref }}
  DEPLOYMENT_COMMIT: ${{ github.sha }}
  DEPLOYMENT_TIME: ${{ github.event.created_at }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      NEXT_PUBLIC_GITHUB_SHA: ${{ github.sha }}
      NEXT_PUBLIC_GITHUB_REF: ${{ github.ref }}
      NEXT_PUBLIC_VERSION: ${{ github.event.ref }}
      NEXT_PUBLIC_DEPLOY_TIME: ${{ github.event.created_at }}
      NEXT_PUBLIC_BUILD_NUMBER: ${{ github.run_number }}
      NEXT_PUBLIC_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      NEXT_PUBLIC_COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # For git history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
            .next/dist
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          npm ci
          npm run build:check

      - name: Security Scan
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        run: |
          npm install -g npm-audit-ci
          npm audit-ci

      - name: Run Tests
        run: |
          npm run test
          npm run test:e2e
          npm run test:perf

      - name: Analyze Performance
        run: |
          npm install -g lighthouse
          lighthouse https://walu22.github.io/dial-a-service-mvp/ --output=json --quiet > lighthouse.json
          
          # Extract performance metrics
          PERFORMANCE_SCORE=$(cat lighthouse.json | jq -r '.categories.performance.score * 100')
          if [ "$PERFORMANCE_SCORE" -lt 85 ]; then
            echo "Performance score is below threshold: $PERFORMANCE_SCORE"
            exit 1
          fi

      - name: Cache Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: lighthouse.json

      - name: Build with version
        run: |
          echo "Building version: ${{ github.sha }}"
          echo "Environment: ${{ env.DEPLOYMENT_ENV }}"
          npm run build
          
          # Generate build report
          echo "Build Report:"
          echo "============="
          echo "Version: ${{ github.event.ref }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
          echo "Message: ${{ github.event.head_commit.message }}"
          echo "Build Time: ${{ github.event.created_at }}"
          echo "Performance Score: $PERFORMANCE_SCORE"

      - name: Validate build
        run: |
          if [ ! -d "out" ]; then
            echo "Build output directory not found"
            exit 1
          fi
          
          # Check for critical files
          if [ ! -f "out/index.html" ]; then
            echo "Missing index.html in build output"
            exit 1
          fi

      - name: Optimize Assets
        run: |
          npm install -g imagemin-cli
          imagemin out/**/*.jpg out/**/*.png --out-dir out/ --plugin=mozjpeg --plugin=pngquant
          
          # Add service worker for PWA support
          cp public/service-worker.js out/
          cp public/manifest.json out/

      - name: Add Security Headers
        run: |
          echo "Adding security headers..."
          mkdir -p out/.well-known
          echo "Strict-Transport-Security: max-age=31536000; includeSubDomains" > out/.well-known/security-headers.txt
          echo "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'" >> out/.well-known/security-headers.txt

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          force_orphan: true
          keep_history: true
          clean: true
          cname: dial-a-service.com
          domain: dial-a-service.com
          verbose: true
          custom_domain: true
          commit_message: "Deploy ${{ github.sha }} to GitHub Pages"
          clean_urls: true
          after_commit: |
            echo "Deployment completed successfully"
            echo "Git SHA: ${{ github.sha }}"
            echo "Deployment Time: ${{ github.event.created_at }}"
            echo "Environment: ${{ env.DEPLOYMENT_ENV }}

      - name: Backup Previous Version
        if: always()
        run: |
          echo "Creating backup of current deployment..."
          mkdir -p backup
          cp -r out/ backup/previous-version
          tar -czf backup/previous-version.tar.gz backup/previous-version
          
      - name: Rollback to Previous Version
        if: ${{ failure() }}
        run: |
          echo "Deployment failed, rolling back to previous version..."
          if [ -f "backup/previous-version.tar.gz" ]; then
            tar -xzf backup/previous-version.tar.gz
            mv backup/previous-version/* out/
            echo "Rollback successful"
          else
            echo "No previous version found for rollback"
          fi

      - name: Send Rollback Notification
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failed
          author_name: "GitHub Actions"
          author_link: "https://github.com/walu22/dial-a-service-mvp"
          title: "Deployment Failed - Rolled Back"
          title_link: "https://github.com/walu22/dial-a-service-mvp/actions"
          text: "Automatic rollback to previous version completed"
          fields: |
            {"title": "Failed Version", "value": "${{ github.sha }}", "short": true}
            {"title": "Rollback Time", "value": "${{ github.event.created_at }}", "short": true}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Post-deployment validation
        run: |
          echo "Running post-deployment checks..."
          curl -I https://walu22.github.io/dial-a-service-mvp/
          curl -I https://dial-a-service.com
          
          # Check for security headers
          SECURITY_HEADERS=$(curl -I https://dial-a-service.com | grep -i "Strict-Transport-Security")
          if [ -z "$SECURITY_HEADERS" ]; then
            echo "Security headers not properly set"
            exit 1
          fi

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: "GitHub Actions"
          author_link: "https://github.com/walu22/dial-a-service-mvp"
          title: "Deployment Status"
          title_link: "https://github.com/walu22/dial-a-service-mvp/actions"
          text: "${{ job.status }}: Deployment of ${{ github.sha }} to GitHub Pages"
          fields: |
            {"title": "Environment", "value": "${{ env.DEPLOYMENT_ENV }}", "short": true}
            {"title": "Version", "value": "${{ github.event.ref }}", "short": true}
            {"title": "Deployment Time", "value": "${{ github.event.created_at }}", "short": true}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
