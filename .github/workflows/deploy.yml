name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEPLOYMENT_ENV: production
  DEPLOYMENT_BRANCH: main
  DEPLOYMENT_TAG: v${{ github.event.ref }}
  DEPLOYMENT_COMMIT: ${{ github.sha }}
  DEPLOYMENT_TIME: ${{ github.event.created_at }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      NEXT_PUBLIC_GITHUB_SHA: ${{ github.sha }}
      NEXT_PUBLIC_GITHUB_REF: ${{ github.ref }}
      NEXT_PUBLIC_VERSION: ${{ github.event.ref }}
      NEXT_PUBLIC_DEPLOY_TIME: ${{ github.event.created_at }}
      NEXT_PUBLIC_BUILD_NUMBER: ${{ github.run_number }}
      NEXT_PUBLIC_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      NEXT_PUBLIC_COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # For git history

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
            .next/dist
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/next.config.js') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          npm ci
          npm run build:check

      - name: Security Scan
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        run: |
          npm install -g npm-audit-ci
          npm audit-ci

      - name: Run Tests
        run: |
          npm run test
          npm run test:e2e
          npm run test:perf

      - name: Install Performance Tools
        run: |
          npm install -g lighthouse webpagetest
          npm install -D speed-measure-webpack-plugin

      - name: Run WebPageTest
        run: |
          echo "Running WebPageTest..."
          webpagetest run https://walu22.github.io/dial-a-service-mvp/ --firstViewOnly --csv > webpagetest.csv
          
          # Parse WebPageTest results
          FIRST_LOAD=$(cat webpagetest.csv | grep -i "First Byte" | awk -F',' '{print $2}')
          if [ "$FIRST_LOAD" -gt 2000 ]; then
            echo "First byte time too high: $FIRST_LOAD ms"
            exit 1
          fi

      - name: Run Lighthouse
        run: |
          echo "Running Lighthouse performance audit..."
          lighthouse https://walu22.github.io/dial-a-service-mvp/ \
            --output=json \
            --quiet \
            --chrome-flags="--headless" \
            --emulated-form-factor=desktop > lighthouse.json
          
          # Extract performance metrics
          # Extract and validate performance metrics
          PERFORMANCE_SCORE=$(cat lighthouse.json | jq -r '.categories.performance.score * 100')
          if [ "$PERFORMANCE_SCORE" -lt 90 ]; then
            echo "Performance score is below threshold: $PERFORMANCE_SCORE"
            exit 1
          fi

          # Core Web Vitals
          FIRST_CONTENTFUL_PAINT=$(cat lighthouse.json | jq -r '.audits.first-contentful-paint.numericValue')
          if [ "$FIRST_CONTENTFUL_PAINT" -gt 1800 ]; then
            echo "First Contentful Paint too high: $FIRST_CONTENTFUL_PAINT ms (Good: <1800ms, Poor: >3000ms)"
            exit 1
          fi

          LARGEST_CONTENTFUL_PAINT=$(cat lighthouse.json | jq -r '.audits.largest-contentful-paint.numericValue')
          if [ "$LARGEST_CONTENTFUL_PAINT" -gt 2800 ]; then
            echo "Largest Contentful Paint too high: $LARGEST_CONTENTFUL_PAINT ms (Good: <2.5s, Poor: >4s)"
            exit 1
          fi

          SPEED_INDEX=$(cat lighthouse.json | jq -r '.audits.speed-index.numericValue')
          if [ "$SPEED_INDEX" -gt 3400 ]; then
            echo "Speed Index too high: $SPEED_INDEX ms (Good: <3.4s, Poor: >5.3s)"
            exit 1
          fi

          TOTAL_BLOCKING_TIME=$(cat lighthouse.json | jq -r '.audits.total-blocking-time.numericValue')
          if [ "$TOTAL_BLOCKING_TIME" -gt 300 ]; then
            echo "Total Blocking Time too high: $TOTAL_BLOCKING_TIME ms (Good: <300ms, Poor: >600ms)"
            exit 1
          fi

          CUMULATIVE_LAYOUT_SHIFT=$(cat lighthouse.json | jq -r '.audits.cumulative-layout-shift.numericValue')
          if (( $(echo "$CUMULATIVE_LAYOUT_SHIFT > 0.1" | bc -l) )); then
            echo "Cumulative Layout Shift too high: $CUMULATIVE_LAYOUT_SHIFT (Good: <0.1, Poor: >0.25)"
            exit 1
          fi

          # Additional performance metrics
          TIME_TO_INTERACTIVE=$(cat lighthouse.json | jq -r '.audits.interactive.numericValue')
          if [ "$TIME_TO_INTERACTIVE" -gt 3800 ]; then
            echo "Time to Interactive too high: $TIME_TO_INTERACTIVE ms (Good: <3.8s, Poor: >7.3s)"
            exit 1
          fi

          NEXT_PAINT=$(cat lighthouse.json | jq -r '.audits.next-paint.numericValue')
          if [ "$NEXT_PAINT" -gt 1500 ]; then
            echo "Next Paint too high: $NEXT_PAINT ms (Good: <1.5s)"
            exit 1
          fi

          # Resource optimization
          TOTAL_BYTE_WEIGHT=$(cat lighthouse.json | jq -r '.audits.total-byte-weight.numericValue')
          if [ "$TOTAL_BYTE_WEIGHT" -gt 4000000 ]; then
            echo "Total Byte Weight too high: $TOTAL_BYTE_WEIGHT bytes (4MB)"
            exit 1
          fi

          # Accessibility
          ACCESSIBILITY_SCORE=$(cat lighthouse.json | jq -r '.categories.accessibility.score * 100')
          if [ "$ACCESSIBILITY_SCORE" -lt 90 ]; then
            echo "Accessibility score is below threshold: $ACCESSIBILITY_SCORE"
            exit 1
          fi

          # Best Practices
          BEST_PRACTICES_SCORE=$(cat lighthouse.json | jq -r '.categories.best-practices.score * 100')
          if [ "$BEST_PRACTICES_SCORE" -lt 95 ]; then
            echo "Best Practices score is below threshold: $BEST_PRACTICES_SCORE"
            exit 1
          fi

          # SEO
          SEO_SCORE=$(cat lighthouse.json | jq -r '.categories.seo.score * 100')
          if [ "$SEO_SCORE" -lt 90 ]; then
            echo "SEO score is below threshold: $SEO_SCORE"
            exit 1
          fi

      - name: Generate Detailed Performance Report
        run: |
          echo "Generating comprehensive performance report..."
          echo "Performance Report for Deployment: ${{ github.sha }}" > performance-report.txt
          echo "================================================" >> performance-report.txt
          echo "" >> performance-report.txt
          echo "Performance Scores:" >> performance-report.txt
          echo "------------------" >> performance-report.txt
          echo "Performance Score: $PERFORMANCE_SCORE% (Target: ≥90%)" >> performance-report.txt
          echo "Accessibility Score: $ACCESSIBILITY_SCORE% (Target: ≥90%)" >> performance-report.txt
          echo "Best Practices Score: $BEST_PRACTICES_SCORE% (Target: ≥95%)" >> performance-report.txt
          echo "SEO Score: $SEO_SCORE% (Target: ≥90%)" >> performance-report.txt
          echo "" >> performance-report.txt
          
          echo "Core Web Vitals (Good/Poor thresholds)" >> performance-report.txt
          echo "--------------------------------------" >> performance-report.txt
          echo "First Contentful Paint: $FIRST_CONTENTFUL_PAINT ms (<1800ms/3000ms)" >> performance-report.txt
          echo "Largest Contentful Paint: $LARGEST_CONTENTFUL_PAINT ms (<2.5s/4s)" >> performance-report.txt
          echo "Speed Index: $SPEED_INDEX ms (<3.4s/5.3s)" >> performance-report.txt
          echo "Total Blocking Time: $TOTAL_BLOCKING_TIME ms (<300ms/600ms)" >> performance-report.txt
          echo "Cumulative Layout Shift: $CUMULATIVE_LAYOUT_SHIFT (<0.1/0.25)" >> performance-report.txt
          echo "" >> performance-report.txt
          
          echo "Additional Performance Metrics" >> performance-report.txt
          echo "------------------------------" >> performance-report.txt
          echo "Time to Interactive: $TIME_TO_INTERACTIVE ms (<3.8s/7.3s)" >> performance-report.txt
          echo "Next Paint: $NEXT_PAINT ms (<1.5s)" >> performance-report.txt
          echo "Total Byte Weight: $TOTAL_BYTE_WEIGHT bytes (4MB max)" >> performance-report.txt
          echo "" >> performance-report.txt
          
          echo "WebPageTest Results" >> performance-report.txt
          echo "-------------------" >> performance-report.txt
          echo "First Byte Time: $FIRST_LOAD ms (<2000ms)" >> performance-report.txt
          echo "" >> performance-report.txt
          
          echo "Performance Status:" >> performance-report.txt
          echo "------------------" >> performance-report.txt
          if [ "$PERFORMANCE_SCORE" -lt 90 ]; then
            echo "❌ Performance Score below threshold" >> performance-report.txt
          fi
          if [ "$ACCESSIBILITY_SCORE" -lt 90 ]; then
            echo "❌ Accessibility Score below threshold" >> performance-report.txt
          fi
          if [ "$BEST_PRACTICES_SCORE" -lt 95 ]; then
            echo "❌ Best Practices Score below threshold" >> performance-report.txt
          fi
          if [ "$SEO_SCORE" -lt 90 ]; then
            echo "❌ SEO Score below threshold" >> performance-report.txt
          fi
          echo "" >> performance-report.txt
          
          echo "Core Web Vitals Status:" >> performance-report.txt
          echo "----------------------" >> performance-report.txt
          if [ "$FIRST_CONTENTFUL_PAINT" -gt 1800 ]; then
            echo "❌ First Contentful Paint too high" >> performance-report.txt
          fi
          if [ "$LARGEST_CONTENTFUL_PAINT" -gt 2800 ]; then
            echo "❌ Largest Contentful Paint too high" >> performance-report.txt
          fi
          if [ "$SPEED_INDEX" -gt 3400 ]; then
            echo "❌ Speed Index too high" >> performance-report.txt
          fi
          if [ "$TOTAL_BLOCKING_TIME" -gt 300 ]; then
            echo "❌ Total Blocking Time too high" >> performance-report.txt
          fi
          if (( $(echo "$CUMULATIVE_LAYOUT_SHIFT > 0.1" | bc -l) )); then
            echo "❌ Cumulative Layout Shift too high" >> performance-report.txt
          fi
          echo "" >> performance-report.txt
          
          echo "Generated at: $(date)" >> performance-report.txt

      - name: Cache Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            lighthouse.json
            webpagetest.csv
            performance-report.txt

      - name: Send Performance Report to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: "Performance Monitor"
          author_link: "https://github.com/walu22/dial-a-service-mvp"
          title: "Performance Report"
          title_link: "https://github.com/walu22/dial-a-service-mvp/actions"
          text: "Performance metrics for deployment ${{ github.sha }}"
          fields: |
            {"title": "Performance Score", "value": "$PERFORMANCE_SCORE%", "short": true}
            {"title": "First Contentful Paint", "value": "$FIRST_CONTENTFUL_PAINT ms", "short": true}
            {"title": "Speed Index", "value": "$SPEED_INDEX ms", "short": true}
            {"title": "Total Blocking Time", "value": "$TOTAL_BLOCKING_TIME ms", "short": true}
            {"title": "First Byte Time", "value": "$FIRST_LOAD ms", "short": true}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Build with version
        run: |
          echo "Building version: ${{ github.sha }}"
          echo "Environment: ${{ env.DEPLOYMENT_ENV }}"
          npm run build
          
          # Generate build report
          echo "Build Report:"
          echo "============="
          echo "Version: ${{ github.event.ref }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
          echo "Message: ${{ github.event.head_commit.message }}"
          echo "Build Time: ${{ github.event.created_at }}"
          echo "Performance Score: $PERFORMANCE_SCORE"

      - name: Validate build
        run: |
          if [ ! -d "out" ]; then
            echo "Build output directory not found"
            exit 1
          fi
          
          # Check for critical files
          if [ ! -f "out/index.html" ]; then
            echo "Missing index.html in build output"
            exit 1
          fi

      - name: Optimize Assets
        run: |
          npm install -g imagemin-cli
          imagemin out/**/*.jpg out/**/*.png --out-dir out/ --plugin=mozjpeg --plugin=pngquant
          
          # Add service worker for PWA support
          cp public/service-worker.js out/
          cp public/manifest.json out/

      - name: Add Security Headers
        run: |
          echo "Adding security headers..."
          mkdir -p out/.well-known
          echo "Strict-Transport-Security: max-age=31536000; includeSubDomains" > out/.well-known/security-headers.txt
          echo "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'" >> out/.well-known/security-headers.txt

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          force_orphan: true
          keep_history: true
          clean: true
          cname: dial-a-service.com
          domain: dial-a-service.com
          verbose: true
          custom_domain: true
          commit_message: "Deploy ${{ github.sha }} to GitHub Pages"
          clean_urls: true
          after_commit: |
            echo "Deployment completed successfully"
            echo "Git SHA: ${{ github.sha }}"
            echo "Deployment Time: ${{ github.event.created_at }}"
            echo "Environment: ${{ env.DEPLOYMENT_ENV }}

      - name: Backup Previous Version
        if: always()
        run: |
          echo "Creating backup of current deployment..."
          mkdir -p backup
          cp -r out/ backup/previous-version
          tar -czf backup/previous-version.tar.gz backup/previous-version
          
      - name: Rollback to Previous Version
        if: ${{ failure() }}
        run: |
          echo "Deployment failed, rolling back to previous version..."
          if [ -f "backup/previous-version.tar.gz" ]; then
            tar -xzf backup/previous-version.tar.gz
            mv backup/previous-version/* out/
            echo "Rollback successful"
          else
            echo "No previous version found for rollback"
          fi

      - name: Send Rollback Notification
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failed
          author_name: "GitHub Actions"
          author_link: "https://github.com/walu22/dial-a-service-mvp"
          title: "Deployment Failed - Rolled Back"
          title_link: "https://github.com/walu22/dial-a-service-mvp/actions"
          text: "Automatic rollback to previous version completed"
          fields: |
            {"title": "Failed Version", "value": "${{ github.sha }}", "short": true}
            {"title": "Rollback Time", "value": "${{ github.event.created_at }}", "short": true}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Post-deployment validation
        run: |
          echo "Running post-deployment checks..."
          curl -I https://walu22.github.io/dial-a-service-mvp/
          curl -I https://dial-a-service.com
          
          # Check for security headers
          SECURITY_HEADERS=$(curl -I https://dial-a-service.com | grep -i "Strict-Transport-Security")
          if [ -z "$SECURITY_HEADERS" ]; then
            echo "Security headers not properly set"
            exit 1
          fi

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: "GitHub Actions"
          author_link: "https://github.com/walu22/dial-a-service-mvp"
          title: "Deployment Status"
          title_link: "https://github.com/walu22/dial-a-service-mvp/actions"
          text: "${{ job.status }}: Deployment of ${{ github.sha }} to GitHub Pages"
          fields: |
            {"title": "Environment", "value": "${{ env.DEPLOYMENT_ENV }}", "short": true}
            {"title": "Version", "value": "${{ github.event.ref }}", "short": true}
            {"title": "Deployment Time", "value": "${{ github.event.created_at }}", "short": true}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
